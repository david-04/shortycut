{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"ShortyCut ShortyCut is a JavaScript application to quickly navigate to websites using keywords. Unlike browser bookmarks, the links and keywords are stored as plain text in a simple file: shortycut.addShortcuts(` [e] Search eBay https://www.ebay.com.au/sch/i.html?nkw=%s [ta] The Age https://www.theage.com.au/melbourne-news [tc] TechCrunch https://techcrunch.com [tg] Typing Games https://www.typing.com/student/game/type-a-balloon [tr] Translate https://dict.leo.org/ende?lp=ende&lang=de&search=%s [tvg] TV Guide https://www.yourtv.com.au/guide/ `); Links are opened by entering the corresponding keyword (e.g. ta or tr ). Using ShortyCut's homepage is the easiest way to do this, because it works in all browsers and provides suggestions while typing: ShortyCut can also be set up as the browser's default search engine, so that keywords can be entered directly in the address bar: ShortyCut makes keywords available in all browsers, including those that don't natively support it. It enhances their capabilities with additional features like keywords with multiple links, support for POST pages and the ability to dynamically generate shortcuts via JavaScript. Resources Visit the GitHub project page: https://github.com/david-04/shortycut Download the latest release: https://github.com/david-04/shortycut/releases View the latest release notes: https://david-04.github.io/shortycut/release-notes.html","title":"Home"},{"location":"index.html#shortycut","text":"ShortyCut is a JavaScript application to quickly navigate to websites using keywords. Unlike browser bookmarks, the links and keywords are stored as plain text in a simple file: shortycut.addShortcuts(` [e] Search eBay https://www.ebay.com.au/sch/i.html?nkw=%s [ta] The Age https://www.theage.com.au/melbourne-news [tc] TechCrunch https://techcrunch.com [tg] Typing Games https://www.typing.com/student/game/type-a-balloon [tr] Translate https://dict.leo.org/ende?lp=ende&lang=de&search=%s [tvg] TV Guide https://www.yourtv.com.au/guide/ `); Links are opened by entering the corresponding keyword (e.g. ta or tr ). Using ShortyCut's homepage is the easiest way to do this, because it works in all browsers and provides suggestions while typing: ShortyCut can also be set up as the browser's default search engine, so that keywords can be entered directly in the address bar: ShortyCut makes keywords available in all browsers, including those that don't natively support it. It enhances their capabilities with additional features like keywords with multiple links, support for POST pages and the ability to dynamically generate shortcuts via JavaScript.","title":"ShortyCut"},{"location":"index.html#resources","text":"Visit the GitHub project page: https://github.com/david-04/shortycut Download the latest release: https://github.com/david-04/shortycut/releases View the latest release notes: https://david-04.github.io/shortycut/release-notes.html","title":"Resources"},{"location":"browser-integration.html","text":"Browser integration In order to intercept keywords and redirect to the corresponding pages, ShortyCut needs to be integrated with the browser. There are different methods to accomplish this. Homepage Using ShortyCut's homepage is the easiest approach that works across all browsers. It's also the most convenient way to enter keywords, because it displays suggestions: ShortyCut's homepage can be set as the browser's start page or pinned as a permanent tab. See \" Homepage \" for details. Keyword query A keyword query is a lightweight method to make shortcuts accessible through the browser's address bar. ShortyCut itself is bookmarked and a keyword is assigned to it. This only works with browsers which natively support keywords. The keyword assigned to the ShortyCut bookmark (e.g. sc ) needs to be entered before the actual keyword itself. If the shortcut e performs a product search on eBay, then a search for sunglasses would be started via: Having to enter ShortyCut's own keyword ( sc ) first, allows it to be used on a case-by-case basis, while preserving the address bar's default behavior for everything else. See \" Keyword query \" for details. Web server When ShortyCut is accessed through a web server, it can be used as the browser's default search engine. Keywords can be entered directly in the address bar, without requiring an additional keyword for ShortyCut itself: This method has better browser support than keyword queries. However, it requires a small web server to run on the local machine or ShortyCut to be uploaded to a web hosting service. See \" Web server \" for details.","title":"Overview"},{"location":"browser-integration.html#browser-integration","text":"In order to intercept keywords and redirect to the corresponding pages, ShortyCut needs to be integrated with the browser. There are different methods to accomplish this.","title":"Browser integration"},{"location":"browser-integration.html#homepage","text":"Using ShortyCut's homepage is the easiest approach that works across all browsers. It's also the most convenient way to enter keywords, because it displays suggestions: ShortyCut's homepage can be set as the browser's start page or pinned as a permanent tab. See \" Homepage \" for details.","title":"Homepage"},{"location":"browser-integration.html#keyword-query","text":"A keyword query is a lightweight method to make shortcuts accessible through the browser's address bar. ShortyCut itself is bookmarked and a keyword is assigned to it. This only works with browsers which natively support keywords. The keyword assigned to the ShortyCut bookmark (e.g. sc ) needs to be entered before the actual keyword itself. If the shortcut e performs a product search on eBay, then a search for sunglasses would be started via: Having to enter ShortyCut's own keyword ( sc ) first, allows it to be used on a case-by-case basis, while preserving the address bar's default behavior for everything else. See \" Keyword query \" for details.","title":"Keyword query"},{"location":"browser-integration.html#web-server","text":"When ShortyCut is accessed through a web server, it can be used as the browser's default search engine. Keywords can be entered directly in the address bar, without requiring an additional keyword for ShortyCut itself: This method has better browser support than keyword queries. However, it requires a small web server to run on the local machine or ShortyCut to be uploaded to a web hosting service. See \" Web server \" for details.","title":"Web server"},{"location":"configuration.html","text":"Configuration ShortyCut can be customized through configuration settings. They are stored in settings.js , which is located in the data folder: shortycut.configure({ shortcutFormat: { comment: '//', keyword: { caseSensitive: false, openingDelimiter: '[', separator: '|', closingDelimiter: ']', }, enableGrouping: false, hotkeyMarker: '', url: { searchTermPlaceholder: '%s', postIndicator: '?POST?', multiLinkIndicator: { replacePrevious: '=', openInNewTab: '^', showMenu: '?', default: 'showMenu' } } }, homepage: { keywords: ['?', 'help', 'home', 'homepage', 'sc', 'shortycut'], suggestions: { showKeywords: true, showHotkeys: true, showFavicons: true, faviconFolders: ['favicons'], } }, defaultSearchEngine: { keyword: 'defaultsearchengine', useInAddressBar: true, useOnHomepage: true } }); Settings can be boolean values ( true or false ) or text, which must be surrounded by single quotes ( ' ). Some settings allow to configure multiple values. They must be separated by commas ( , ) and surrounded by square brackets ( [ and ] ). Text containing certain characters can interfere with the JavaScript syntax and cause problems. Try to avoid using the following characters, particularly in the shortcutFormat section: backslashes ( \\ ) backticks ( ` ) single quotes ( ' ) the dollar symbol followed by a curly bracket (${ ) If settings.js does not contain a specific property, a default value is applied. This might happen when upgrading to a newer version of ShortyCut which introduces additional settings. When adding new properties to settings.js , make sure to place them at the same location as in the example above. shortcutFormat.comment This property defines the character(s) which introduce comments within shortcut definitions. The default value is the double-slash ( // ). Lines starting with the given sequence are treated as comment and ignored. See \" File format \" for details. shortcutFormat.keyword.caseSensitive This property enables or disables case-sensitivity for keywords. The default value is false , meaning that keywords are not case-sensitive. A news shortcut could be opened by entering variations like News or NEWS . On the other hand, if the property is set to true , keywords must be entered exactly as they are defined in shortcuts.js . shortcutFormat.keyword.openingDelimiter and shortcutFormat.keyword.closingDelimiter These properties define the characters that can be put in front and after keywords in shortcut definitions. The default values are the square brackets ( [ and ] ). It is optional to actually use the delimiters when defining shortcuts. See \" Shortcut syntax \" for details. shortcutFormat.keyword.separator This property defines the character that separates multiple keywords for the same shortcut. The default value is the pipe symbol ( | ). See \" Shortcut syntax \" for details. shortcutFormat.enableGrouping This property enables or disables support for organizing shortcuts in groups. The default value is false , meaning that grouping is disabled. See \" Grouping \" for details. shortcutFormat.hotkeyMarker This property defines the character which marks hotkeys in a shortcut's description. The default value is an empty string ( '' ), meaning that hotkey marking is not being used. See \" Hotkeys \" for details. shortcutFormat.url.searchTermPlaceholder This property defines the placeholder which is used in links to indicate where the search term needs to be inserted. The default value is %s . See \" Shortcut syntax \" for details. shortcutFormat.url.postIndicator This property defines the text that is appended to a link to separate POST data fields. The default value is ?POST? . See \" Post links \" for details. shortcutFormat.url.multiLinkIndicator.replacePrevious This property defines the character(s) that can be put in front of a link to force all previous links with the same keyword to be ignored. The default value is the equals sign ( = ). See \" Multi-link shortcuts \" for details. shortcutFormat.url.multiLinkIndicator.openInNewTab This property defines the character that can be put in front of a link to open all links with the same keyword in separate tabs. The default value is the caret ( ^ ). See \" Multi-link shortcuts \" for details. shortcutFormat.url.multiLinkIndicator.showMenu This property defines the character that can be put in front of a link to show an interactive list of all links with the same keyword. The default value is the question mark ( ? ). See \" Multi-link shortcuts \" for details. shortcutFormat.url.multiLinkIndicator.default This property defines the default behavior for keywords with multiple links. It can be set to replacePrevious , openInNewTab or showMenu (which is the default value). See \" Multi-link shortcuts \" for details. homepage.keywords This property defines keywords that can be entered in the browser's address bar to open ShortyCut's homepage. The default values are ? , help , home , homepage , sc and shortycut . When entering one of these keywords, the homepage is opened (instead of invoking the default search engine ). homepage.suggestions.showKeywords This property enables or disables the display of keywords as part of suggestions on ShortyCut's homepage. The default value is true , meaning that the keywords are displayed in front of the description. When hotkeys are used, this is often not necessary and can be disabled by setting the property to false . homepage.suggestions.showHotkeys This property enables or disables the highlighting of hotkeys in the description of suggestions. The default value is true , meaning that hotkeys are displayed. It is only applicable to shortcuts where the description contains all letters of the keyword (in the same order). See \" Hotkeys \" for details. homepage.suggestions.showFavicons This property enables or disables the display of favicons on ShortyCut's homepage. The default value is true , meaning that websites' favicons are displayed as part of the suggestions. See \" Favicons \" for details. homepage.suggestions.faviconFolders This property defines the folder(s) where downloaded favicons are stored. The default value is data/favicons . Favicons need to be downloaded and stored in this folder manually. See \" Favicons \" for details. defaultSearchEngine.keyword This property defines the keyword of the shortcut which serves as the default search engine. The default value is defaultsearchengine . The shortcut with this keyword is used for all input that does not match any (other) keywords. See \" Default search engine \" for details. defaultSearchEngine.useInAddressBar This property enables or disables the default search engine when ShortyCut is invoked from the browser's address bar. The default value is true , meaning that all input that does not mach any keyword is forwarded to the default search engine. See \" Default search engine \" for details. defaultSearchEngine.useOnHomepage This property enables or disables the default search engine on ShortyCut's homepage. The default value is true , meaning that all input that does not mach any keyword is forwarded to the default search engine. See \" Default search engine \" for details.","title":"Configuration"},{"location":"configuration.html#configuration","text":"ShortyCut can be customized through configuration settings. They are stored in settings.js , which is located in the data folder: shortycut.configure({ shortcutFormat: { comment: '//', keyword: { caseSensitive: false, openingDelimiter: '[', separator: '|', closingDelimiter: ']', }, enableGrouping: false, hotkeyMarker: '', url: { searchTermPlaceholder: '%s', postIndicator: '?POST?', multiLinkIndicator: { replacePrevious: '=', openInNewTab: '^', showMenu: '?', default: 'showMenu' } } }, homepage: { keywords: ['?', 'help', 'home', 'homepage', 'sc', 'shortycut'], suggestions: { showKeywords: true, showHotkeys: true, showFavicons: true, faviconFolders: ['favicons'], } }, defaultSearchEngine: { keyword: 'defaultsearchengine', useInAddressBar: true, useOnHomepage: true } }); Settings can be boolean values ( true or false ) or text, which must be surrounded by single quotes ( ' ). Some settings allow to configure multiple values. They must be separated by commas ( , ) and surrounded by square brackets ( [ and ] ). Text containing certain characters can interfere with the JavaScript syntax and cause problems. Try to avoid using the following characters, particularly in the shortcutFormat section: backslashes ( \\ ) backticks ( ` ) single quotes ( ' ) the dollar symbol followed by a curly bracket (${ ) If settings.js does not contain a specific property, a default value is applied. This might happen when upgrading to a newer version of ShortyCut which introduces additional settings. When adding new properties to settings.js , make sure to place them at the same location as in the example above.","title":"Configuration"},{"location":"configuration.html#shortcutformatcomment","text":"This property defines the character(s) which introduce comments within shortcut definitions. The default value is the double-slash ( // ). Lines starting with the given sequence are treated as comment and ignored. See \" File format \" for details.","title":"shortcutFormat.comment"},{"location":"configuration.html#shortcutformatkeywordcasesensitive","text":"This property enables or disables case-sensitivity for keywords. The default value is false , meaning that keywords are not case-sensitive. A news shortcut could be opened by entering variations like News or NEWS . On the other hand, if the property is set to true , keywords must be entered exactly as they are defined in shortcuts.js .","title":"shortcutFormat.keyword.caseSensitive"},{"location":"configuration.html#shortcutformatkeywordopeningdelimiter-and-shortcutformatkeywordclosingdelimiter","text":"These properties define the characters that can be put in front and after keywords in shortcut definitions. The default values are the square brackets ( [ and ] ). It is optional to actually use the delimiters when defining shortcuts. See \" Shortcut syntax \" for details.","title":"shortcutFormat.keyword.openingDelimiter and shortcutFormat.keyword.closingDelimiter"},{"location":"configuration.html#shortcutformatkeywordseparator","text":"This property defines the character that separates multiple keywords for the same shortcut. The default value is the pipe symbol ( | ). See \" Shortcut syntax \" for details.","title":"shortcutFormat.keyword.separator"},{"location":"configuration.html#shortcutformatenablegrouping","text":"This property enables or disables support for organizing shortcuts in groups. The default value is false , meaning that grouping is disabled. See \" Grouping \" for details.","title":"shortcutFormat.enableGrouping"},{"location":"configuration.html#shortcutformathotkeymarker","text":"This property defines the character which marks hotkeys in a shortcut's description. The default value is an empty string ( '' ), meaning that hotkey marking is not being used. See \" Hotkeys \" for details.","title":"shortcutFormat.hotkeyMarker"},{"location":"configuration.html#shortcutformaturlsearchtermplaceholder","text":"This property defines the placeholder which is used in links to indicate where the search term needs to be inserted. The default value is %s . See \" Shortcut syntax \" for details.","title":"shortcutFormat.url.searchTermPlaceholder"},{"location":"configuration.html#shortcutformaturlpostindicator","text":"This property defines the text that is appended to a link to separate POST data fields. The default value is ?POST? . See \" Post links \" for details.","title":"shortcutFormat.url.postIndicator"},{"location":"configuration.html#shortcutformaturlmultilinkindicatorreplaceprevious","text":"This property defines the character(s) that can be put in front of a link to force all previous links with the same keyword to be ignored. The default value is the equals sign ( = ). See \" Multi-link shortcuts \" for details.","title":"shortcutFormat.url.multiLinkIndicator.replacePrevious"},{"location":"configuration.html#shortcutformaturlmultilinkindicatoropeninnewtab","text":"This property defines the character that can be put in front of a link to open all links with the same keyword in separate tabs. The default value is the caret ( ^ ). See \" Multi-link shortcuts \" for details.","title":"shortcutFormat.url.multiLinkIndicator.openInNewTab"},{"location":"configuration.html#shortcutformaturlmultilinkindicatorshowmenu","text":"This property defines the character that can be put in front of a link to show an interactive list of all links with the same keyword. The default value is the question mark ( ? ). See \" Multi-link shortcuts \" for details.","title":"shortcutFormat.url.multiLinkIndicator.showMenu"},{"location":"configuration.html#shortcutformaturlmultilinkindicatordefault","text":"This property defines the default behavior for keywords with multiple links. It can be set to replacePrevious , openInNewTab or showMenu (which is the default value). See \" Multi-link shortcuts \" for details.","title":"shortcutFormat.url.multiLinkIndicator.default"},{"location":"configuration.html#homepagekeywords","text":"This property defines keywords that can be entered in the browser's address bar to open ShortyCut's homepage. The default values are ? , help , home , homepage , sc and shortycut . When entering one of these keywords, the homepage is opened (instead of invoking the default search engine ).","title":"homepage.keywords"},{"location":"configuration.html#homepagesuggestionsshowkeywords","text":"This property enables or disables the display of keywords as part of suggestions on ShortyCut's homepage. The default value is true , meaning that the keywords are displayed in front of the description. When hotkeys are used, this is often not necessary and can be disabled by setting the property to false .","title":"homepage.suggestions.showKeywords"},{"location":"configuration.html#homepagesuggestionsshowhotkeys","text":"This property enables or disables the highlighting of hotkeys in the description of suggestions. The default value is true , meaning that hotkeys are displayed. It is only applicable to shortcuts where the description contains all letters of the keyword (in the same order). See \" Hotkeys \" for details.","title":"homepage.suggestions.showHotkeys"},{"location":"configuration.html#homepagesuggestionsshowfavicons","text":"This property enables or disables the display of favicons on ShortyCut's homepage. The default value is true , meaning that websites' favicons are displayed as part of the suggestions. See \" Favicons \" for details.","title":"homepage.suggestions.showFavicons"},{"location":"configuration.html#homepagesuggestionsfaviconfolders","text":"This property defines the folder(s) where downloaded favicons are stored. The default value is data/favicons . Favicons need to be downloaded and stored in this folder manually. See \" Favicons \" for details.","title":"homepage.suggestions.faviconFolders"},{"location":"configuration.html#defaultsearchenginekeyword","text":"This property defines the keyword of the shortcut which serves as the default search engine. The default value is defaultsearchengine . The shortcut with this keyword is used for all input that does not match any (other) keywords. See \" Default search engine \" for details.","title":"defaultSearchEngine.keyword"},{"location":"configuration.html#defaultsearchengineuseinaddressbar","text":"This property enables or disables the default search engine when ShortyCut is invoked from the browser's address bar. The default value is true , meaning that all input that does not mach any keyword is forwarded to the default search engine. See \" Default search engine \" for details.","title":"defaultSearchEngine.useInAddressBar"},{"location":"configuration.html#defaultsearchengineuseonhomepage","text":"This property enables or disables the default search engine on ShortyCut's homepage. The default value is true , meaning that all input that does not mach any keyword is forwarded to the default search engine. See \" Default search engine \" for details.","title":"defaultSearchEngine.useOnHomepage"},{"location":"default-search-engine.html","text":"Default search engine ShortyCut's primary purpose is to open bookmarked pages through the use of keywords. But it also serves as an entry point for general web searches. Input that does not match any keyword is forwarded to a search engine. Changing the search engine By default, ShortyCut uses DuckDuckGo for web searches. It can be switched to any other search engine by adding a shortcut with the keyword defaultsearchengine . The link must contain the %s placeholder for the actual search term: [defaultsearchengine] Google https://www.google.com/search?&q=%s Sometimes it's useful to have shortcuts for different search engines and switch between them on a case-by-case basis by using the corresponding keyword: [b] Bing https://www.bing.com/search?q=%s [g] Google https://www.google.com/search?&q=%s [y] Yahoo https://search.yahoo.com/search?p=%s Any existing shortcut can be nominated as the default search engine without assigning the defaultsearchengine keyword, by setting the configuration property keyword instead: shortycut.configure({ defaultSearchEngine: { keyword: 'g' }, }); In this example, the shortcut with the keyword g (Google) is set up as the default search engine. Disabling the search engine The default search engine can be disabled to enforce the use of keywords at all times. This can be done individually for the browser's address bar and ShortyCut's homepage by setting the configuration properties useInAddressBar and/or useOnHomepage to false .","title":"Default search engine"},{"location":"default-search-engine.html#default-search-engine","text":"ShortyCut's primary purpose is to open bookmarked pages through the use of keywords. But it also serves as an entry point for general web searches. Input that does not match any keyword is forwarded to a search engine.","title":"Default search engine"},{"location":"default-search-engine.html#changing-the-search-engine","text":"By default, ShortyCut uses DuckDuckGo for web searches. It can be switched to any other search engine by adding a shortcut with the keyword defaultsearchengine . The link must contain the %s placeholder for the actual search term: [defaultsearchengine] Google https://www.google.com/search?&q=%s Sometimes it's useful to have shortcuts for different search engines and switch between them on a case-by-case basis by using the corresponding keyword: [b] Bing https://www.bing.com/search?q=%s [g] Google https://www.google.com/search?&q=%s [y] Yahoo https://search.yahoo.com/search?p=%s Any existing shortcut can be nominated as the default search engine without assigning the defaultsearchengine keyword, by setting the configuration property keyword instead: shortycut.configure({ defaultSearchEngine: { keyword: 'g' }, }); In this example, the shortcut with the keyword g (Google) is set up as the default search engine.","title":"Changing the search engine"},{"location":"default-search-engine.html#disabling-the-search-engine","text":"The default search engine can be disabled to enforce the use of keywords at all times. This can be done individually for the browser's address bar and ShortyCut's homepage by setting the configuration properties useInAddressBar and/or useOnHomepage to false .","title":"Disabling the search engine"},{"location":"favicons.html","text":"Favicons ShortyCut displays websites' favicons to make it easier to spot the right suggestion: While entering keywords, the list of suggestions often changes rapidly. Adding another letter might remove most of the previous suggestions and show others instead. At the same time, loading the icons is quite slow and can take several seconds. Subsequently, the icons often show up too late. One way of dealing with this problem is to download all favicons for quicker access. When loaded from a local disk drive, there's hardly any noticeable delay. Alternatively, favicons can be disabled altogether. This is done by setting the configuration property showFavicons to false . Favicon tools ShortyCut contains a favicon tools page which helps with the review and download of favicons. It can be accessed via the menu on the homepage: It scans all shortcuts to determine which favicons have been or should be downloaded: This might take a while. Make sure to wait until all links have been checked before proceeding. Downloadable favicons The first section of the page shows a list of all favicons that are available for download: Due to browser restrictions, each favicon must be downloaded and renamed manually: Right-click on the icon and save the image Rename the saved file to the filename displayed next to the icon Move all icons into the favicons folder (inside the data folder) Favicons can also be downloaded automatically by pasting the provided curl commands into a terminal. This requires familiarity with the command line. Missing favicons The next section of the page displays websites that don't have a standard favicon: When downloading icons from elsewhere, the base filename (without extension) must be exactly as displayed in the list. For example, the icon for dict.leo.org could be saved as dict.leo.org.ico . The file extensions can be ico , jpg , png or svg . Downloaded favicons The last section of the page lists all favicons that have already been downloaded: It can be used to very that favicons are in the right folder and have the correct filename. The list does not contain favicons for websites which don't have a corresponding shortcut.","title":"Favicons"},{"location":"favicons.html#favicons","text":"ShortyCut displays websites' favicons to make it easier to spot the right suggestion: While entering keywords, the list of suggestions often changes rapidly. Adding another letter might remove most of the previous suggestions and show others instead. At the same time, loading the icons is quite slow and can take several seconds. Subsequently, the icons often show up too late. One way of dealing with this problem is to download all favicons for quicker access. When loaded from a local disk drive, there's hardly any noticeable delay. Alternatively, favicons can be disabled altogether. This is done by setting the configuration property showFavicons to false .","title":"Favicons"},{"location":"favicons.html#favicon-tools","text":"ShortyCut contains a favicon tools page which helps with the review and download of favicons. It can be accessed via the menu on the homepage: It scans all shortcuts to determine which favicons have been or should be downloaded: This might take a while. Make sure to wait until all links have been checked before proceeding.","title":"Favicon tools"},{"location":"favicons.html#downloadable-favicons","text":"The first section of the page shows a list of all favicons that are available for download: Due to browser restrictions, each favicon must be downloaded and renamed manually: Right-click on the icon and save the image Rename the saved file to the filename displayed next to the icon Move all icons into the favicons folder (inside the data folder) Favicons can also be downloaded automatically by pasting the provided curl commands into a terminal. This requires familiarity with the command line.","title":"Downloadable favicons"},{"location":"favicons.html#missing-favicons","text":"The next section of the page displays websites that don't have a standard favicon: When downloading icons from elsewhere, the base filename (without extension) must be exactly as displayed in the list. For example, the icon for dict.leo.org could be saved as dict.leo.org.ico . The file extensions can be ico , jpg , png or svg .","title":"Missing favicons"},{"location":"favicons.html#downloaded-favicons","text":"The last section of the page lists all favicons that have already been downloaded: It can be used to very that favicons are in the right folder and have the correct filename. The list does not contain favicons for websites which don't have a corresponding shortcut.","title":"Downloaded favicons"},{"location":"file-format.html","text":"Shortcut file format Shortcuts are stored in shortcuts.js , a file located inside the data folder. It can be modified with any text editor. Standard format Shortcuts are defined as a JavaScript string with one shortcut per line. They need to be placed between the backticks ( ` ) on top and at the bottom of the file: shortycut.addShortcuts(` // Add your shortcut definitions here... [sunnies] Sunglasses https://www.ebay.com.au/sch/i.html?_nkw=sunglasses [ebay] Search eBay https://www.ebay.com.au/sch/i.html?_nkw=%s `); Lines which are empty or start with a double-slash ( // ) are treated as comments and ignored. This allows to add notes or to temporarily disable shortcuts without deleting them. Backslashes ( \\ ), backticks ( ` ) and dollar signs followed by an opening curly bracket ( ${ ) have a special meaning in JavaScript. They are best avoided. If that's not possible, put an extra backslash ( \\ ) in front of them: Replace \\ with \\\\ Replace ` with \\` Replace ${ with \\${ If the preceding backslash ( \\ ) is missing, ShortyCut might not be able to load any shortcuts at all. Legacy format A few browsers like Internet Explorer and Opera Mini do not support the backtick ( ` ) syntax. A slightly different format is required to use ShortyCut with those browsers, too: shortycut.addShortcuts([ // Add your shortcut definitions here... '[sunnies] Sunglasses at eBay https://www.ebay.com.au/sch/i.html?_nkw=sunglasses', '[ebay] Search eBay https://www.ebay.com.au/sch/i.html?_nkw=%s', ]); Each shortcut definition must be surrounded by single quotes ( ' ) and followed by a comma ( , ) at the end of the line. Within each line, single quotes ( ' ) and backslashes ( \\ ) have a special meaning and are best avoided. If that's not possible, put an extra backslash ( \\ ) in front of them: Replace \\ with \\\\ Replace ' with \\' The legacy format has better compatibility and works in all browsers. But it's also more prone to errors, e.g. by accidentally omitting one of the single quotes ( ' ) or commas ( , ). Unless Opera Mini or Internet Explorer is used, it's recommended to use the standard format.","title":"File format"},{"location":"file-format.html#shortcut-file-format","text":"Shortcuts are stored in shortcuts.js , a file located inside the data folder. It can be modified with any text editor.","title":"Shortcut file format"},{"location":"file-format.html#standard-format","text":"Shortcuts are defined as a JavaScript string with one shortcut per line. They need to be placed between the backticks ( ` ) on top and at the bottom of the file: shortycut.addShortcuts(` // Add your shortcut definitions here... [sunnies] Sunglasses https://www.ebay.com.au/sch/i.html?_nkw=sunglasses [ebay] Search eBay https://www.ebay.com.au/sch/i.html?_nkw=%s `); Lines which are empty or start with a double-slash ( // ) are treated as comments and ignored. This allows to add notes or to temporarily disable shortcuts without deleting them. Backslashes ( \\ ), backticks ( ` ) and dollar signs followed by an opening curly bracket ( ${ ) have a special meaning in JavaScript. They are best avoided. If that's not possible, put an extra backslash ( \\ ) in front of them: Replace \\ with \\\\ Replace ` with \\` Replace ${ with \\${ If the preceding backslash ( \\ ) is missing, ShortyCut might not be able to load any shortcuts at all.","title":"Standard format"},{"location":"file-format.html#legacy-format","text":"A few browsers like Internet Explorer and Opera Mini do not support the backtick ( ` ) syntax. A slightly different format is required to use ShortyCut with those browsers, too: shortycut.addShortcuts([ // Add your shortcut definitions here... '[sunnies] Sunglasses at eBay https://www.ebay.com.au/sch/i.html?_nkw=sunglasses', '[ebay] Search eBay https://www.ebay.com.au/sch/i.html?_nkw=%s', ]); Each shortcut definition must be surrounded by single quotes ( ' ) and followed by a comma ( , ) at the end of the line. Within each line, single quotes ( ' ) and backslashes ( \\ ) have a special meaning and are best avoided. If that's not possible, put an extra backslash ( \\ ) in front of them: Replace \\ with \\\\ Replace ' with \\' The legacy format has better compatibility and works in all browsers. But it's also more prone to errors, e.g. by accidentally omitting one of the single quotes ( ' ) or commas ( , ). Unless Opera Mini or Internet Explorer is used, it's recommended to use the standard format.","title":"Legacy format"},{"location":"grouping.html","text":"Grouping Grouping can be used to reduce the number of suggestions on ShortyCut's homepage. This is useful when similar shortcuts have keywords that start with the same letters. One example is GitHub, where it can be handy to not only quickly access specific projects, but also their various pages (like releases, pull requests and issues): [gh] GibHub https://github.com/ [ghsc] GitHub ShortyCut https://github.com/david-04/shortycut [ghscc] GitHub ShortyCut commits https://github.com/.../commits [ghscr] GitHub ShortyCut releases https://github.com/.../releases [ghsci] GitHub ShortyCut issues https://github.com/.../issues [ghscpr] GitHub ShortyCut pull requests https://github.com/.../pulls [ghmkd] GitHub MkDocs https://github.com/mkdocs/mkdocs [ghmkdc] GitHub MkDocs commits https://github.com/.../commits [ghmkdr] GitHub MkDocs releases https://github.com/.../releases [ghmkdi] GitHub MkDocs issues https://github.com/.../issues [ghmkdpr] GitHub MkDocs pull requests https://github.com/.../pulls This example uses a naming convention that's quite easy to remember. Keywords always start with gh for GitHub, followed by the project (e.g. sc for ShortyCut). An optional page (e.g. i for issues) can be appended at the end. Using this naming convention quickly leads to a lot of keywords starting with gh , which can mess up the suggestions on ShortyCut's homepage. Typing g , for example, would flood the list with GitHub suggestion, obstructing the view and hiding other (potentially more relevant) shortcuts: Grouping can be used to reduce the number of suggestions and get more relevant results. It is disabled by default and needs to be activated by setting the configuration property enableGrouping to true : shortycut.configure({ shortcutFormat: { enableGrouping: true }, }); When grouping is enabled, the keywords can be segmented and intertwined with the description: [gh] GibHub https://github.com/ [gh] GitHub [sc] ShortyCut https://github.com/david-04/shortycut [gh] GitHub [sc] ShortyCut [c] commits https://github.com/.../commits [gh] GitHub [sc] ShortyCut [r] releases https://github.com/.../releases [gh] GitHub [sc] ShortyCut [i] issues https://github.com/.../issues [gh] GitHub [sc] ShortyCut [pr] pull requests https://github.com/.../pulls [gh] GitHub [mkd] MkDocs https://github.com/mkdocs/mkdocs [gh] GitHub [mkd] MkDocs [c] commits https://github.com/.../commits [gh] GitHub [mkd] MkDocs [r] releases https://github.com/.../releases [gh] GitHub [mkd] MkDocs [i] issues https://github.com/.../issues [gh] GitHub [mkd] MkDocs [pr] pull requests https://github.com/.../pulls The square brackets ( [ and ] ) are usually optional, but they must be used for all shortcuts that use grouping. On the other hand, grouping itself is optional can be applied selectively to only those shortcuts that benefit from it. On ShortyCut's homepage, grouped shortcuts unfold level by level. For example, after typing g , all GitHub links are hidden behind a single suggestion: Once the GitHub part of the keyword ( gh ) is entered completely, the individual projects become visible. Pages beneath them, like releases or issues, are still hidden: The various pages for a single project become only visible when the input matches the full project part of the keyword:","title":"Grouping"},{"location":"grouping.html#grouping","text":"Grouping can be used to reduce the number of suggestions on ShortyCut's homepage. This is useful when similar shortcuts have keywords that start with the same letters. One example is GitHub, where it can be handy to not only quickly access specific projects, but also their various pages (like releases, pull requests and issues): [gh] GibHub https://github.com/ [ghsc] GitHub ShortyCut https://github.com/david-04/shortycut [ghscc] GitHub ShortyCut commits https://github.com/.../commits [ghscr] GitHub ShortyCut releases https://github.com/.../releases [ghsci] GitHub ShortyCut issues https://github.com/.../issues [ghscpr] GitHub ShortyCut pull requests https://github.com/.../pulls [ghmkd] GitHub MkDocs https://github.com/mkdocs/mkdocs [ghmkdc] GitHub MkDocs commits https://github.com/.../commits [ghmkdr] GitHub MkDocs releases https://github.com/.../releases [ghmkdi] GitHub MkDocs issues https://github.com/.../issues [ghmkdpr] GitHub MkDocs pull requests https://github.com/.../pulls This example uses a naming convention that's quite easy to remember. Keywords always start with gh for GitHub, followed by the project (e.g. sc for ShortyCut). An optional page (e.g. i for issues) can be appended at the end. Using this naming convention quickly leads to a lot of keywords starting with gh , which can mess up the suggestions on ShortyCut's homepage. Typing g , for example, would flood the list with GitHub suggestion, obstructing the view and hiding other (potentially more relevant) shortcuts: Grouping can be used to reduce the number of suggestions and get more relevant results. It is disabled by default and needs to be activated by setting the configuration property enableGrouping to true : shortycut.configure({ shortcutFormat: { enableGrouping: true }, }); When grouping is enabled, the keywords can be segmented and intertwined with the description: [gh] GibHub https://github.com/ [gh] GitHub [sc] ShortyCut https://github.com/david-04/shortycut [gh] GitHub [sc] ShortyCut [c] commits https://github.com/.../commits [gh] GitHub [sc] ShortyCut [r] releases https://github.com/.../releases [gh] GitHub [sc] ShortyCut [i] issues https://github.com/.../issues [gh] GitHub [sc] ShortyCut [pr] pull requests https://github.com/.../pulls [gh] GitHub [mkd] MkDocs https://github.com/mkdocs/mkdocs [gh] GitHub [mkd] MkDocs [c] commits https://github.com/.../commits [gh] GitHub [mkd] MkDocs [r] releases https://github.com/.../releases [gh] GitHub [mkd] MkDocs [i] issues https://github.com/.../issues [gh] GitHub [mkd] MkDocs [pr] pull requests https://github.com/.../pulls The square brackets ( [ and ] ) are usually optional, but they must be used for all shortcuts that use grouping. On the other hand, grouping itself is optional can be applied selectively to only those shortcuts that benefit from it. On ShortyCut's homepage, grouped shortcuts unfold level by level. For example, after typing g , all GitHub links are hidden behind a single suggestion: Once the GitHub part of the keyword ( gh ) is entered completely, the individual projects become visible. Pages beneath them, like releases or issues, are still hidden: The various pages for a single project become only visible when the input matches the full project part of the keyword:","title":"Grouping"},{"location":"homepage.html","text":"Homepage The easiest way to access ShortyCut is to set its homepage as the browser's start page. However, the start page is usually not loaded when opening new tabs. This makes it rather complicated to access ShortyCut. It's usually easier to keep one tab with the homepage open at all times and reuse it whenever needed. This can be done by pinning the tab via the context menu: When reusing the homepage tab, it's important that it does not navigate to other pages when keywords are entered. ShortyCut contains an option that causes all links to be opened in new tabs. This effectively locks the homepage to its tab, so that it can be reused over and over again. Homepage settings related to its use as the start page or as a pinned tab, are added as parameters in the browser's address bar. Links with preconfigured settings can be created through the browser integration page, which is accessible via the menu: The \"Homepage\" section lists different behaviors that can be activated by ticking the corresponding checkboxes: The link displayed at the bottom of the section incorporates the selected settings. It should be used as the browser's start page or as the pinning tab.","title":"Homepage"},{"location":"homepage.html#homepage","text":"The easiest way to access ShortyCut is to set its homepage as the browser's start page. However, the start page is usually not loaded when opening new tabs. This makes it rather complicated to access ShortyCut. It's usually easier to keep one tab with the homepage open at all times and reuse it whenever needed. This can be done by pinning the tab via the context menu: When reusing the homepage tab, it's important that it does not navigate to other pages when keywords are entered. ShortyCut contains an option that causes all links to be opened in new tabs. This effectively locks the homepage to its tab, so that it can be reused over and over again. Homepage settings related to its use as the start page or as a pinned tab, are added as parameters in the browser's address bar. Links with preconfigured settings can be created through the browser integration page, which is accessible via the menu: The \"Homepage\" section lists different behaviors that can be activated by ticking the corresponding checkboxes: The link displayed at the bottom of the section incorporates the selected settings. It should be used as the browser's start page or as the pinning tab.","title":"Homepage"},{"location":"hotkeys.html","text":"Hotkeys When ShortyCut displays suggestions, it shows the keyword and highlights the next letters to type in the description: The letters highlighted as hotkeys might not be the best choice, if keywords follow specific patterns. For example, they might be composed of the first letter of each word, like tg for \" T yping G ames\". The automatic highlighting does not consider those rules and highlights the wrong g . To work around this problem, hotkeys can be explicitly marked when defining shortcuts. This is done by putting a designated symbol in front of each hotkey within the description. Any symbol can be used, but it must be configured as hotkeyMarker first: shortycut.configure({ shortcutFormat: { hotkeyMarker: '_' } }); In this example, the underscore ( _ ) can be used to mark the correct hotkeys: [tr] Translate https://dict.leo.org/ende?search=%s [ta] The Age https://www.theage.com.au/ [tg] _Typing _Games https://www.typing.com/student/game [tc] _Tech_Crunch https://techcrunch.com It's important that the hotkeys are aligned with the keyword. ShortyCut disregards markers if the letters don't match. On the other hand, there's no need to mark hotkeys if the automatic highlighting would pick the right ones anyway. ShortyCut uses the designed hotkeys where possible, and resorts to automatic highlighting in all other cases: The hotkey highlighting can be turned off by setting the configuration property showHotkeys to false . This can be useful if the description only rarely contains all letters from the keyword. On the other hand, if the descriptions are usually hotkey-friendly, the keywords displayed on the left-hand side can be hidden by setting the configuration property showKeywords to false .","title":"Hotkeys"},{"location":"hotkeys.html#hotkeys","text":"When ShortyCut displays suggestions, it shows the keyword and highlights the next letters to type in the description: The letters highlighted as hotkeys might not be the best choice, if keywords follow specific patterns. For example, they might be composed of the first letter of each word, like tg for \" T yping G ames\". The automatic highlighting does not consider those rules and highlights the wrong g . To work around this problem, hotkeys can be explicitly marked when defining shortcuts. This is done by putting a designated symbol in front of each hotkey within the description. Any symbol can be used, but it must be configured as hotkeyMarker first: shortycut.configure({ shortcutFormat: { hotkeyMarker: '_' } }); In this example, the underscore ( _ ) can be used to mark the correct hotkeys: [tr] Translate https://dict.leo.org/ende?search=%s [ta] The Age https://www.theage.com.au/ [tg] _Typing _Games https://www.typing.com/student/game [tc] _Tech_Crunch https://techcrunch.com It's important that the hotkeys are aligned with the keyword. ShortyCut disregards markers if the letters don't match. On the other hand, there's no need to mark hotkeys if the automatic highlighting would pick the right ones anyway. ShortyCut uses the designed hotkeys where possible, and resorts to automatic highlighting in all other cases: The hotkey highlighting can be turned off by setting the configuration property showHotkeys to false . This can be useful if the description only rarely contains all letters from the keyword. On the other hand, if the descriptions are usually hotkey-friendly, the keywords displayed on the left-hand side can be hidden by setting the configuration property showKeywords to false .","title":"Hotkeys"},{"location":"installation.html","text":"Installation To install ShortyCut, download the latest version from GitHub: https://github.com/david-04/shortycut/releases Extract the zip archive to any location, e.g. the desktop or your home folder. ShortyCut requires a few files to store settings and shortcuts. It comes with template files to be used as a starting point. To activate them, rename the data-template folder to data (i.e. remove the -template from the folder's name): shortycut +-- data-template <--- rename this folder from: data-template +-- resources to: data +-- index.html <------ then open this file in your browser After renaming the folder, open index.html in your browser (e.g. by double-clicking on it). If you see ShortyCut's homepage, the installation is complete. Customization After installing ShortyCut, you need to add your own links and keywords. This is done by editing shortcuts.js in the data folder. See \" Shortcut syntax \" for details. In order to use the keywords, you also need to make them available in your browser. The easiest way is to pin ShortyCut's homepage, but other methods are available, too. See \" Browser integration \" for details. ShortyCut can be customized by editing settings.js in the data folder. This includes enabling and disabling features as well as tweaking the way shortcuts are defined. See \" Configuration \" for details. Finally, browse through the other pages of the manual. They cover a variety of different aspects that will help you to make the most of ShortyCut. Upgrading When upgrading to a newer version, your shortcuts and settings are preserved. However, in case something does go wrong, it's always advisable to create a backup copy of the data folder first. Then download the latest release, unzip the archive and overwrite your current installation with the new files.","title":"Installation"},{"location":"installation.html#installation","text":"To install ShortyCut, download the latest version from GitHub: https://github.com/david-04/shortycut/releases Extract the zip archive to any location, e.g. the desktop or your home folder. ShortyCut requires a few files to store settings and shortcuts. It comes with template files to be used as a starting point. To activate them, rename the data-template folder to data (i.e. remove the -template from the folder's name): shortycut +-- data-template <--- rename this folder from: data-template +-- resources to: data +-- index.html <------ then open this file in your browser After renaming the folder, open index.html in your browser (e.g. by double-clicking on it). If you see ShortyCut's homepage, the installation is complete.","title":"Installation"},{"location":"installation.html#customization","text":"After installing ShortyCut, you need to add your own links and keywords. This is done by editing shortcuts.js in the data folder. See \" Shortcut syntax \" for details. In order to use the keywords, you also need to make them available in your browser. The easiest way is to pin ShortyCut's homepage, but other methods are available, too. See \" Browser integration \" for details. ShortyCut can be customized by editing settings.js in the data folder. This includes enabling and disabling features as well as tweaking the way shortcuts are defined. See \" Configuration \" for details. Finally, browse through the other pages of the manual. They cover a variety of different aspects that will help you to make the most of ShortyCut.","title":"Customization"},{"location":"installation.html#upgrading","text":"When upgrading to a newer version, your shortcuts and settings are preserved. However, in case something does go wrong, it's always advisable to create a backup copy of the data folder first. Then download the latest release, unzip the archive and overwrite your current installation with the new files.","title":"Upgrading"},{"location":"keyword-query.html","text":"Keyword query This integration method only works with browsers which natively support keywords (e.g. Chrome and Firefox). It's an easy way to make ShortyCut accessible through the browser's address bar. A dedicated keyword (e.g. sc ) is assigned to ShortyCut itself and needs to be entered before the actual keyword. For example, if the shortcut e performs a product search on eBay, then a search for sunglasses would be started via: The dedicated keyword for ShortyCut allows it to be used on a case-by-case basis when needed, while preserving the address bar's default behavior for everything else. Firefox To create a keyword query in Firefox, open the browser integration page via the homepage's menu: Scroll down to the \"Keyword query\" section, right click on the input field and select \"Add a Keyword for this Search...\": This will open a \"New Bookmark\" dialog. Enter a keyword (e.g. sc ) and save the changes: Alternatively, copy the link displayed at the bottom of the \"Keyword query\" section, create a new bookmark and assign the keyword there: The keyword can also be changed later in the properties' dialog when editing the bookmark. Chrome To create a keyword query in Chrome, open the browser integration page via the homepage's menu: Scroll down to the \"Keyword query\" section and copy the link at the bottom of the section: Open the browser settings, scroll down to the \"Search engine\" section and select \"Manage search engines\": Under \"Other search engines\", click the \"Add\" button: Give the search engine a name (e.g. ShortyCut ), assign a keyword (e.g. sc ) and paste the link from the browser integration page: Chrome can also use ShortyCut as the default search engine. If so, the shortcut (e.g. sc ) can be omitted. Everything that's entered in the browser's address bar is passed on to ShortyCut automatically. To enable this feature, click on the three dots to the right of the ShortyCut search engine and select \"Make default\": Using ShortyCut as the default search engine disables all other features of the address bar. It particularly prevents the display of search engine suggestions as you type.","title":"Keyword query"},{"location":"keyword-query.html#keyword-query","text":"This integration method only works with browsers which natively support keywords (e.g. Chrome and Firefox). It's an easy way to make ShortyCut accessible through the browser's address bar. A dedicated keyword (e.g. sc ) is assigned to ShortyCut itself and needs to be entered before the actual keyword. For example, if the shortcut e performs a product search on eBay, then a search for sunglasses would be started via: The dedicated keyword for ShortyCut allows it to be used on a case-by-case basis when needed, while preserving the address bar's default behavior for everything else.","title":"Keyword query"},{"location":"keyword-query.html#firefox","text":"To create a keyword query in Firefox, open the browser integration page via the homepage's menu: Scroll down to the \"Keyword query\" section, right click on the input field and select \"Add a Keyword for this Search...\": This will open a \"New Bookmark\" dialog. Enter a keyword (e.g. sc ) and save the changes: Alternatively, copy the link displayed at the bottom of the \"Keyword query\" section, create a new bookmark and assign the keyword there: The keyword can also be changed later in the properties' dialog when editing the bookmark.","title":"Firefox"},{"location":"keyword-query.html#chrome","text":"To create a keyword query in Chrome, open the browser integration page via the homepage's menu: Scroll down to the \"Keyword query\" section and copy the link at the bottom of the section: Open the browser settings, scroll down to the \"Search engine\" section and select \"Manage search engines\": Under \"Other search engines\", click the \"Add\" button: Give the search engine a name (e.g. ShortyCut ), assign a keyword (e.g. sc ) and paste the link from the browser integration page: Chrome can also use ShortyCut as the default search engine. If so, the shortcut (e.g. sc ) can be omitted. Everything that's entered in the browser's address bar is passed on to ShortyCut automatically. To enable this feature, click on the three dots to the right of the ShortyCut search engine and select \"Make default\": Using ShortyCut as the default search engine disables all other features of the address bar. It particularly prevents the display of search engine suggestions as you type.","title":"Chrome"},{"location":"keywords.html","text":"Keywords Some browsers allow to assign keywords to bookmarks. Instead of having to find and click on the bookmark itself, the page can be opened by entering the keyword in the browser's address bar. This is quicker than navigating through the bookmark collection. The chore of browsing Websites are continuously growing as more content and new features are added. This makes them more useful, but also adds complexity. Finding the relevant information often involves visiting multiple intermediate pages. Each of them takes effort (to find and click on the right link) and time (to wait for the next page to load). Navigating in small steps, one at a time, is neither efficient nor enjoyable. One example of click-intensive browsing is online shopping. Getting the most relevant results often requires multiple filters to be applied. Imagine you're in Australia and - with summer approaching fast - in urgent need of a nice (and cheap) pair of sunnies. To find suitable offers, you might go through a couple of steps: Open ebay.com.au (or use a search engine for lesser known domains) Enter the term \"sunglasses\" into the search field Select the category \"men\" or \"women\" (to fit your style) Change the sort order to \"price\" (so that the cheapest offers appear on top) If not logged in, set the delivery location (to get the correct shipping rates) Deselect auctions (because you want to buy it now) Filter Australian offers only (to get it delivered as soon as possible) Customize further as required (e.g. free returns only or more results per page) Finding the perfect pair of sunglasses can be hard work. But there are shortcuts available. Keyword bookmarks Most websites add filters and other settings to the URL (the address displayed in the browser's address bar). This allows the customized view to be bookmarked. When revisiting the page, all filters are restored automatically. This can speed things up, but searching for the right bookmark takes time, too. That's where keywords come into play. In Firefox, they can be added in the bookmark properties dialog: Once a keyword has been assigned, it can be entered in the browser's address bar: With keywords it's easy to catch up on the latest offers without a single click: Press Ctrl + L (to focus on address bar) or Ctrl + T (to open a new tab) Enter the keyword sunnies Press Enter This will open the bookmarked page and restores all filters. There's no need to step through intermediate pages, customize the listing or find the right bookmark. Keyword searches Keyword bookmarks are great for quickly restoring filters and directly accessing nested pages. But they're also kind of a one-trick pony and always produce the same page view. A more versatile form are keyword searches. They work with websites that allow searching for things like products, news or images. Like filters and settings, the search term is usually included in the page's address: https://www.ebay.com.au/sch/i.html?_nkw=sunglasses&_from=R40&LH_PrefLoc=1 Once such a page has been bookmarked, it can be turned into a keyword search by replacing the original search term sunglasses with %s (which is as a special placeholder recognized by the browser): This bookmark allows to search for any product on eBay and is no longer limited to sunglasses. It's used by entering the keyword ( ebay ) followed by the search term (e.g. hat ) in the address bar: This will open eBay, restore all bookmarked filters and search for hats. Limitations Keywords are incredibly handy. They bypass long-winded navigation steps, restore filter settings and open the right page straight away. As a native browser feature, they do have some limitations, though. In Chrome, for example, the usability is not great. In order to assign keywords, bookmarks need to be added as search engines. This is done in the settings and less convenient than working with regular bookmarks. Search engines can't be organized in folders either. All keywords end up in one long list, making it hard to maintain them. Some browsers, like for example Edge, don't support keywords at all. And those that do, usually lack the ability to synchronize them with other browsers. Keywords need to be maintained separately when using different browsers simultaneously.","title":"Keywords"},{"location":"keywords.html#keywords","text":"Some browsers allow to assign keywords to bookmarks. Instead of having to find and click on the bookmark itself, the page can be opened by entering the keyword in the browser's address bar. This is quicker than navigating through the bookmark collection.","title":"Keywords"},{"location":"keywords.html#the-chore-of-browsing","text":"Websites are continuously growing as more content and new features are added. This makes them more useful, but also adds complexity. Finding the relevant information often involves visiting multiple intermediate pages. Each of them takes effort (to find and click on the right link) and time (to wait for the next page to load). Navigating in small steps, one at a time, is neither efficient nor enjoyable. One example of click-intensive browsing is online shopping. Getting the most relevant results often requires multiple filters to be applied. Imagine you're in Australia and - with summer approaching fast - in urgent need of a nice (and cheap) pair of sunnies. To find suitable offers, you might go through a couple of steps: Open ebay.com.au (or use a search engine for lesser known domains) Enter the term \"sunglasses\" into the search field Select the category \"men\" or \"women\" (to fit your style) Change the sort order to \"price\" (so that the cheapest offers appear on top) If not logged in, set the delivery location (to get the correct shipping rates) Deselect auctions (because you want to buy it now) Filter Australian offers only (to get it delivered as soon as possible) Customize further as required (e.g. free returns only or more results per page) Finding the perfect pair of sunglasses can be hard work. But there are shortcuts available.","title":"The chore of browsing"},{"location":"keywords.html#keyword-bookmarks","text":"Most websites add filters and other settings to the URL (the address displayed in the browser's address bar). This allows the customized view to be bookmarked. When revisiting the page, all filters are restored automatically. This can speed things up, but searching for the right bookmark takes time, too. That's where keywords come into play. In Firefox, they can be added in the bookmark properties dialog: Once a keyword has been assigned, it can be entered in the browser's address bar: With keywords it's easy to catch up on the latest offers without a single click: Press Ctrl + L (to focus on address bar) or Ctrl + T (to open a new tab) Enter the keyword sunnies Press Enter This will open the bookmarked page and restores all filters. There's no need to step through intermediate pages, customize the listing or find the right bookmark.","title":"Keyword bookmarks"},{"location":"keywords.html#keyword-searches","text":"Keyword bookmarks are great for quickly restoring filters and directly accessing nested pages. But they're also kind of a one-trick pony and always produce the same page view. A more versatile form are keyword searches. They work with websites that allow searching for things like products, news or images. Like filters and settings, the search term is usually included in the page's address: https://www.ebay.com.au/sch/i.html?_nkw=sunglasses&_from=R40&LH_PrefLoc=1 Once such a page has been bookmarked, it can be turned into a keyword search by replacing the original search term sunglasses with %s (which is as a special placeholder recognized by the browser): This bookmark allows to search for any product on eBay and is no longer limited to sunglasses. It's used by entering the keyword ( ebay ) followed by the search term (e.g. hat ) in the address bar: This will open eBay, restore all bookmarked filters and search for hats.","title":"Keyword searches"},{"location":"keywords.html#limitations","text":"Keywords are incredibly handy. They bypass long-winded navigation steps, restore filter settings and open the right page straight away. As a native browser feature, they do have some limitations, though. In Chrome, for example, the usability is not great. In order to assign keywords, bookmarks need to be added as search engines. This is done in the settings and less convenient than working with regular bookmarks. Search engines can't be organized in folders either. All keywords end up in one long list, making it hard to maintain them. Some browsers, like for example Edge, don't support keywords at all. And those that do, usually lack the ability to synchronize them with other browsers. Keywords need to be maintained separately when using different browsers simultaneously.","title":"Limitations"},{"location":"license.html","text":"License MIT License Copyright (c) 2020 David Hofmann Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license.html#license","text":"MIT License Copyright (c) 2020 David Hofmann Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"multi-link-shortcuts.html","text":"Multi-link shortcuts Sometimes web pages provide similar or complementing information. One example are news websites with index pages per category and region. Separate keywords can be used to bookmark them individually: [news-au] News \u00bb Australia https://www.theage.com.au/national [news-finance] News \u00bb Finance https://www.reuters.com/finance [news-sports] News \u00bb Sports https://www.msn.com/en-us/sports [news-world] News \u00bb World https://www.bbc.com/news/world As the number of keyword variations grows, it becomes harder to remember them. It's usually easier to assign all related pages to the same keyword: [news] News \u00bb Australia https://www.theage.com.au/national [news] News \u00bb Finance https://www.reuters.com/finance [news] News \u00bb Sports https://www.msn.com/en-us/sports [news] News \u00bb World https://www.bbc.com/news/world When entering a keyword with multiple links, ShortyCut shows a list to choose from: The \"Open all\" item on top of the list can be used to open all links in new tabs. This can also be set as the default behavior in the configuration , causing ShortyCut to always open new tabs without showing the list first. On top of that, each shortcut can override the default behavior and enforce to either show the list or open new tabs. Show a list A question mark ( ? ) in front of links causes the keyword to always show the list: [news] News \u00bb Australia ?https://www.theage.com.au/national [news] News \u00bb Finance ?https://www.reuters.com/finance [news] News \u00bb Sports ?https://www.msn.com/en-us/sports [news] News \u00bb World ?https://www.bbc.com/news/world In this example, the news keyword will always show the list, even if the default behavior is set to open new tabs. Open new tabs A caret ( ^ ) in front of links causes the keyword to always open new tabs: [news] News \u00bb Australia ^https://www.theage.com.au/national [news] News \u00bb Finance ^https://www.reuters.com/finance [news] News \u00bb Sports ^https://www.msn.com/en-us/sports [news] News \u00bb World ^https://www.bbc.com/news/world In this example, the news keyword will always open new tabs, even if the default behavior is set to show the list. Ignore previous links An equals sign ( = ) in front of a link causes all previous links to be discarded: [news] News \u00bb Australia ?https://www.theage.com.au/national [news] News \u00bb Finance ?https://www.reuters.com/finance [news] News \u00bb Sports ?https://www.msn.com/en-us/sports [news] News \u00bb World =https://www.bbc.com/news/world In this example, importing the last line will cause ShortyCut to discard all previous links. The news keyword is treated as if it had only one link (world news). It's the same effect as if the first three lines lines were not there at all. Ignoring previous links is rarely needed. It can be used to override individual keywords when importing shared shortcut collections. It can also be used to temporarily redirect or repurpose a keyword, without having to delete (and later restore) the current set of links. Mixing behaviors The equals sign ( = ) always causes the previous links to be discarded. The behavior for the remaining shortcuts is determined only by the last link. [news] News \u00bb Australia https://www.theage.com.au/national [news] News \u00bb Finance =https://www.reuters.com/finance [news] News \u00bb Sports ^https://www.msn.com/en-us/sports [news] News \u00bb World ?https://www.bbc.com/news/world In this example, the equals sign ( = ) in finance news causes the previous link (Australia news) to be discarded. The keyword will eventually have three links (finance, sports and world news). A list will be displayed, because the last link (world news) has a question mark ( ? ). If it didn't have any indicator, the configured default behavior would apply. The caret ( ^ ) in front of the sports link is always ignored and can be omitted.","title":"Multi-link shortcuts"},{"location":"multi-link-shortcuts.html#multi-link-shortcuts","text":"Sometimes web pages provide similar or complementing information. One example are news websites with index pages per category and region. Separate keywords can be used to bookmark them individually: [news-au] News \u00bb Australia https://www.theage.com.au/national [news-finance] News \u00bb Finance https://www.reuters.com/finance [news-sports] News \u00bb Sports https://www.msn.com/en-us/sports [news-world] News \u00bb World https://www.bbc.com/news/world As the number of keyword variations grows, it becomes harder to remember them. It's usually easier to assign all related pages to the same keyword: [news] News \u00bb Australia https://www.theage.com.au/national [news] News \u00bb Finance https://www.reuters.com/finance [news] News \u00bb Sports https://www.msn.com/en-us/sports [news] News \u00bb World https://www.bbc.com/news/world When entering a keyword with multiple links, ShortyCut shows a list to choose from: The \"Open all\" item on top of the list can be used to open all links in new tabs. This can also be set as the default behavior in the configuration , causing ShortyCut to always open new tabs without showing the list first. On top of that, each shortcut can override the default behavior and enforce to either show the list or open new tabs.","title":"Multi-link shortcuts"},{"location":"multi-link-shortcuts.html#show-a-list","text":"A question mark ( ? ) in front of links causes the keyword to always show the list: [news] News \u00bb Australia ?https://www.theage.com.au/national [news] News \u00bb Finance ?https://www.reuters.com/finance [news] News \u00bb Sports ?https://www.msn.com/en-us/sports [news] News \u00bb World ?https://www.bbc.com/news/world In this example, the news keyword will always show the list, even if the default behavior is set to open new tabs.","title":"Show a list"},{"location":"multi-link-shortcuts.html#open-new-tabs","text":"A caret ( ^ ) in front of links causes the keyword to always open new tabs: [news] News \u00bb Australia ^https://www.theage.com.au/national [news] News \u00bb Finance ^https://www.reuters.com/finance [news] News \u00bb Sports ^https://www.msn.com/en-us/sports [news] News \u00bb World ^https://www.bbc.com/news/world In this example, the news keyword will always open new tabs, even if the default behavior is set to show the list.","title":"Open new tabs"},{"location":"multi-link-shortcuts.html#ignore-previous-links","text":"An equals sign ( = ) in front of a link causes all previous links to be discarded: [news] News \u00bb Australia ?https://www.theage.com.au/national [news] News \u00bb Finance ?https://www.reuters.com/finance [news] News \u00bb Sports ?https://www.msn.com/en-us/sports [news] News \u00bb World =https://www.bbc.com/news/world In this example, importing the last line will cause ShortyCut to discard all previous links. The news keyword is treated as if it had only one link (world news). It's the same effect as if the first three lines lines were not there at all. Ignoring previous links is rarely needed. It can be used to override individual keywords when importing shared shortcut collections. It can also be used to temporarily redirect or repurpose a keyword, without having to delete (and later restore) the current set of links.","title":"Ignore previous links"},{"location":"multi-link-shortcuts.html#mixing-behaviors","text":"The equals sign ( = ) always causes the previous links to be discarded. The behavior for the remaining shortcuts is determined only by the last link. [news] News \u00bb Australia https://www.theage.com.au/national [news] News \u00bb Finance =https://www.reuters.com/finance [news] News \u00bb Sports ^https://www.msn.com/en-us/sports [news] News \u00bb World ?https://www.bbc.com/news/world In this example, the equals sign ( = ) in finance news causes the previous link (Australia news) to be discarded. The keyword will eventually have three links (finance, sports and world news). A list will be displayed, because the last link (world news) has a question mark ( ? ). If it didn't have any indicator, the configured default behavior would apply. The caret ( ^ ) in front of the sports link is always ignored and can be omitted.","title":"Mixing behaviors"},{"location":"post-links.html","text":"POST links Some pages transmit data via the POST method, which prevents filters and settings from showing up in the browser's address bar. It's often used for sensitive input like usernames and passwords. As a side effect, these pages can't (and often shouldn't) be bookmarked. But in some cases it's safe and handy to create a shortcut nevertheless. Link syntax A regular link becomes a POST link by appending ?POST? followed by the data to be transmitted: [ebay] eBay http://localhost/my-app/sign-in?POST?user=shortycut&password=secret In this example, the username shortycut and the password secret would be transmitted without showing up in the browser's address bar. The fields must be in key=value format and separated by an ampersand ( & ). The placeholder %s can be used like in any other link: [ebay] eBay http://localhost/my-app/sign-in?POST?user=shortycut&password=%s In this example, the password needs to be entered alongside the keyword. Typing ebay secret in the browser's address bar would attempt to log in user shortycut with the password secret . URL-Encoding All keys and values (except for the %s placeholder) must be URL-encoded. This means that most characters apart from letters and digits can't be used directly. One example is the @ symbol, which needs to be written as %40 instead. If the username was me@gmail.com , the login link would look like this: [ebay] eBay http://localhost/my-app/sign-in?POST?user=me%40gmail.com&password=%s ShortyCut includes link tools, which can be used to quickly encode any text. It's accessed via the burger icon on the upper right-hand side of the homepage: The section for URL-encoding contains two fields, one for the plain text and one for the URL-encoded version. Everything typed into the plain text field is encoded immediately. The result is displayed in the field below: Text that is already encoded can also be decoded by entering it into the URL-encoded field. Extracting POST links Preparing a POST link can be a bit of a scavenger hunt. The field names can't be seen in the browser's address bar and usually need to be extracted from the page's source code. An easier way is to automatically extract the links from the network traffic recorded by the browser. The instructions below are based on Chrome, but it can be done in most other browsers as well. The first step is to open the page and populate the form fields. Before clicking the submit button, right-click anywhere on the page and select \"Inspect\": This will open the browser's developer tools on the side or at the bottom of the window. Switch to the \"Network\" tab and tick the \"preserve log\" checkbox. In some browsers this might be hidden in the menu and have a different name (e.g. \"persist log\"): Now submit the form (in this example by clicking on \"Log in & check e-mails\"). The browser will record and display all network traffic in the \"Network\" tab: Once the page has been loaded, right-click on the network traffic and copy (or save) all requests as HAR (HTTP archive): Then open ShortyCut's link tools via the burger icon on the homepage: Scroll down to the section for extracting POST links and paste the HTTP archive (HAR) data into the text field: ShortyCut will extract all POST requests and display the matching links below the input field. The links are already URL-encoded and can be modified as required (e.g. by replacing a value with the %s placeholder).","title":"POST links"},{"location":"post-links.html#post-links","text":"Some pages transmit data via the POST method, which prevents filters and settings from showing up in the browser's address bar. It's often used for sensitive input like usernames and passwords. As a side effect, these pages can't (and often shouldn't) be bookmarked. But in some cases it's safe and handy to create a shortcut nevertheless.","title":"POST links"},{"location":"post-links.html#link-syntax","text":"A regular link becomes a POST link by appending ?POST? followed by the data to be transmitted: [ebay] eBay http://localhost/my-app/sign-in?POST?user=shortycut&password=secret In this example, the username shortycut and the password secret would be transmitted without showing up in the browser's address bar. The fields must be in key=value format and separated by an ampersand ( & ). The placeholder %s can be used like in any other link: [ebay] eBay http://localhost/my-app/sign-in?POST?user=shortycut&password=%s In this example, the password needs to be entered alongside the keyword. Typing ebay secret in the browser's address bar would attempt to log in user shortycut with the password secret .","title":"Link syntax"},{"location":"post-links.html#url-encoding","text":"All keys and values (except for the %s placeholder) must be URL-encoded. This means that most characters apart from letters and digits can't be used directly. One example is the @ symbol, which needs to be written as %40 instead. If the username was me@gmail.com , the login link would look like this: [ebay] eBay http://localhost/my-app/sign-in?POST?user=me%40gmail.com&password=%s ShortyCut includes link tools, which can be used to quickly encode any text. It's accessed via the burger icon on the upper right-hand side of the homepage: The section for URL-encoding contains two fields, one for the plain text and one for the URL-encoded version. Everything typed into the plain text field is encoded immediately. The result is displayed in the field below: Text that is already encoded can also be decoded by entering it into the URL-encoded field.","title":"URL-Encoding"},{"location":"post-links.html#extracting-post-links","text":"Preparing a POST link can be a bit of a scavenger hunt. The field names can't be seen in the browser's address bar and usually need to be extracted from the page's source code. An easier way is to automatically extract the links from the network traffic recorded by the browser. The instructions below are based on Chrome, but it can be done in most other browsers as well. The first step is to open the page and populate the form fields. Before clicking the submit button, right-click anywhere on the page and select \"Inspect\": This will open the browser's developer tools on the side or at the bottom of the window. Switch to the \"Network\" tab and tick the \"preserve log\" checkbox. In some browsers this might be hidden in the menu and have a different name (e.g. \"persist log\"): Now submit the form (in this example by clicking on \"Log in & check e-mails\"). The browser will record and display all network traffic in the \"Network\" tab: Once the page has been loaded, right-click on the network traffic and copy (or save) all requests as HAR (HTTP archive): Then open ShortyCut's link tools via the burger icon on the homepage: Scroll down to the section for extracting POST links and paste the HTTP archive (HAR) data into the text field: ShortyCut will extract all POST requests and display the matching links below the input field. The links are already URL-encoded and can be modified as required (e.g. by replacing a value with the %s placeholder).","title":"Extracting POST links"},{"location":"release-notes.html","text":"Release notes Version 1.0 / 2020-08-16 Initial release","title":"Release notes"},{"location":"release-notes.html#release-notes","text":"","title":"Release notes"},{"location":"release-notes.html#version-10-2020-08-16","text":"Initial release","title":"Version 1.0 / 2020-08-16"},{"location":"shortcut-syntax.html","text":"Shortcut syntax Each shortcut consists of a keyword, a description and a link: [sunnies] Sunglasses at eBay https://www.ebay.com.au/sch/i.html?_nkw=sunglasses The keyword is the one that's entered on ShortyCut's homepage or in the browser's address bar. The description in the middle is optional and can be omitted, but makes it easier to find shortcuts. The link at the end of the line is the page that's opened whenever the keyword is used. Keyword The square brackets ( [ and ] ) around keywords are used for readability only. They are optional and can be omitted: sunnies Sunglasses at eBay https://www.ebay.com.au/sch/i.html?_nkw=sunglasses [ebay] Search eBay https://www.ebay.com.au/sch/i.html?_nkw=%s Each shortcut can have multiple keywords. This allows the link to be opened by entering any one of them. Multiple keywords are concatenated with pipe symbols ( | ) between them. When using square brackets ( [ and ] ), blanks can be inserted for readability. Otherwise there must be no whitespace between the keywords and the pipe symbols ( | ): s|sunnies Sunglasses at eBay https://www.ebay.com.au/sch/i.html?_nkw=sunglasses [ e | ebay ] Search eBay https://www.ebay.com.au/sch/i.html?_nkw=%s In this example, the sunglasses listing can be opened by entering either s or sunnies , while a product search can be started via e or ebay . Description The description is optional and can be omitted. It's recommended to add it nevertheless, particularly when using ShortyCut's homepage. Descriptions are used for the full-text search and displayed as part of the suggestions when entering keywords. Link The last part of the shortcut definition is the link. It should always start with the protocol ( http:// or https:// ). It can also contain the placeholder %s to allow entering a search term alongside the keyword: [sunnies] Sunglasses https://www.ebay.com.au/sch/i.html?_nkw=sunglasses [ebay] Search eBay https://www.ebay.com.au/sch/i.html?_nkw=%s In this example, sunnies is a keyword bookmark, because the link doesn't contain any placeholder. The keyword is used on its own and always opens the same page (the sunglasses listing). On the other hand, the link for ebay does have a placeholder. The keyword is entered alongside a search term, which replaces the %s in the link. For example, entering ebay hat in the browser's address bar will open the hats listing. Shortcuts can also point to POST pages, where the link does not contain settings, filters or search terms. See \" POST links \" for details.","title":"Shortcut syntax"},{"location":"shortcut-syntax.html#shortcut-syntax","text":"Each shortcut consists of a keyword, a description and a link: [sunnies] Sunglasses at eBay https://www.ebay.com.au/sch/i.html?_nkw=sunglasses The keyword is the one that's entered on ShortyCut's homepage or in the browser's address bar. The description in the middle is optional and can be omitted, but makes it easier to find shortcuts. The link at the end of the line is the page that's opened whenever the keyword is used.","title":"Shortcut syntax"},{"location":"shortcut-syntax.html#keyword","text":"The square brackets ( [ and ] ) around keywords are used for readability only. They are optional and can be omitted: sunnies Sunglasses at eBay https://www.ebay.com.au/sch/i.html?_nkw=sunglasses [ebay] Search eBay https://www.ebay.com.au/sch/i.html?_nkw=%s Each shortcut can have multiple keywords. This allows the link to be opened by entering any one of them. Multiple keywords are concatenated with pipe symbols ( | ) between them. When using square brackets ( [ and ] ), blanks can be inserted for readability. Otherwise there must be no whitespace between the keywords and the pipe symbols ( | ): s|sunnies Sunglasses at eBay https://www.ebay.com.au/sch/i.html?_nkw=sunglasses [ e | ebay ] Search eBay https://www.ebay.com.au/sch/i.html?_nkw=%s In this example, the sunglasses listing can be opened by entering either s or sunnies , while a product search can be started via e or ebay .","title":"Keyword"},{"location":"shortcut-syntax.html#description","text":"The description is optional and can be omitted. It's recommended to add it nevertheless, particularly when using ShortyCut's homepage. Descriptions are used for the full-text search and displayed as part of the suggestions when entering keywords.","title":"Description"},{"location":"shortcut-syntax.html#link","text":"The last part of the shortcut definition is the link. It should always start with the protocol ( http:// or https:// ). It can also contain the placeholder %s to allow entering a search term alongside the keyword: [sunnies] Sunglasses https://www.ebay.com.au/sch/i.html?_nkw=sunglasses [ebay] Search eBay https://www.ebay.com.au/sch/i.html?_nkw=%s In this example, sunnies is a keyword bookmark, because the link doesn't contain any placeholder. The keyword is used on its own and always opens the same page (the sunglasses listing). On the other hand, the link for ebay does have a placeholder. The keyword is entered alongside a search term, which replaces the %s in the link. For example, entering ebay hat in the browser's address bar will open the hats listing. Shortcuts can also point to POST pages, where the link does not contain settings, filters or search terms. See \" POST links \" for details.","title":"Link"},{"location":"shortycut.html","text":"ShortyCut ShortyCut is a small JavaScript application that enhances the capabilities of keywords and makes them available in a wider range of browsers. Homepage ShortyCut's homepage can be used to enter keywords (rather than typing them into the browser's address bar). Along the way it provides suggestions, making it easier to find the right shortcut: When no keyword matches, suggestions are drawn from the shortcuts' descriptions. This allows to search through the bookmark collection without having to remember the keyword. Address bar integration While the homepage works in all browsers and is easy to set up, it's also possible to enter keywords in the address bar. For most browsers, this requires a small web server, which already comes bundled with ShortyCut. Shortcuts as text file Shortcuts are stored as plain text and can be edited in any text editor. This makes it easy to reorganize, back up and share them with others. Each shortcut contains a keyword, an optional description and a link: [sunnies] Sunglasses at eBay https://www.ebay.com.au/sch/i.html?_nkw=sunglasses [ebay] Search eBay https://www.ebay.com.au/sch/i.html?_nkw=%s&_sacat=0 The same file with shortcut definitions is loaded wherever ShortyCut is started. When using multiple browsers, the keywords are available in all of them, without requiring any synchronization. Multi-link shortcuts The same keyword can be assigned to multiple links. ShortyCut can open all of them in separate tabs or show a list to choose from: The default behavior can be configured globally and - if required - overridden for each keyword individually. POST links Most web pages lend themselves naturally to bookmarking by including all filters and settings in their address. However, sometimes sensitive data like passwords should not be visible in the browser's address bar. In those cases, pages use the POST method, where the data is transmitted separately. ShortyCut allows to bookmark and reopen these pages as if they supported filters and settings in their address. Generated bookmarks Shortcuts can not only be defined as plain text, but also generated through JavaScript code. This can be useful when links follow a similar pattern. For example, when working with GitHub repositories, it might be handy to have shortcuts for different aspects of a project: [scc] ShortyCut commits https://github.com/david-04/shortycut/commits/main [scr] ShortyCut releases https://github.com/david-04/shortycut/releases [sci] ShortyCut issues https://github.com/david-04/shortycut/issues [scpr] ShortyCut pull requests https://github.com/david-04/shortycut/pulls Similar shortcuts for other projects can be created by replacing the user and repository name in the link. Instead of copying and pasting, those shortcuts can be generated dynamically by writing JavaScript code.","title":"ShortyCut"},{"location":"shortycut.html#shortycut","text":"ShortyCut is a small JavaScript application that enhances the capabilities of keywords and makes them available in a wider range of browsers.","title":"ShortyCut"},{"location":"shortycut.html#homepage","text":"ShortyCut's homepage can be used to enter keywords (rather than typing them into the browser's address bar). Along the way it provides suggestions, making it easier to find the right shortcut: When no keyword matches, suggestions are drawn from the shortcuts' descriptions. This allows to search through the bookmark collection without having to remember the keyword.","title":"Homepage"},{"location":"shortycut.html#address-bar-integration","text":"While the homepage works in all browsers and is easy to set up, it's also possible to enter keywords in the address bar. For most browsers, this requires a small web server, which already comes bundled with ShortyCut.","title":"Address bar integration"},{"location":"shortycut.html#shortcuts-as-text-file","text":"Shortcuts are stored as plain text and can be edited in any text editor. This makes it easy to reorganize, back up and share them with others. Each shortcut contains a keyword, an optional description and a link: [sunnies] Sunglasses at eBay https://www.ebay.com.au/sch/i.html?_nkw=sunglasses [ebay] Search eBay https://www.ebay.com.au/sch/i.html?_nkw=%s&_sacat=0 The same file with shortcut definitions is loaded wherever ShortyCut is started. When using multiple browsers, the keywords are available in all of them, without requiring any synchronization.","title":"Shortcuts as text file"},{"location":"shortycut.html#multi-link-shortcuts","text":"The same keyword can be assigned to multiple links. ShortyCut can open all of them in separate tabs or show a list to choose from: The default behavior can be configured globally and - if required - overridden for each keyword individually.","title":"Multi-link shortcuts"},{"location":"shortycut.html#post-links","text":"Most web pages lend themselves naturally to bookmarking by including all filters and settings in their address. However, sometimes sensitive data like passwords should not be visible in the browser's address bar. In those cases, pages use the POST method, where the data is transmitted separately. ShortyCut allows to bookmark and reopen these pages as if they supported filters and settings in their address.","title":"POST links"},{"location":"shortycut.html#generated-bookmarks","text":"Shortcuts can not only be defined as plain text, but also generated through JavaScript code. This can be useful when links follow a similar pattern. For example, when working with GitHub repositories, it might be handy to have shortcuts for different aspects of a project: [scc] ShortyCut commits https://github.com/david-04/shortycut/commits/main [scr] ShortyCut releases https://github.com/david-04/shortycut/releases [sci] ShortyCut issues https://github.com/david-04/shortycut/issues [scpr] ShortyCut pull requests https://github.com/david-04/shortycut/pulls Similar shortcuts for other projects can be created by replacing the user and repository name in the link. Instead of copying and pasting, those shortcuts can be generated dynamically by writing JavaScript code.","title":"Generated bookmarks"},{"location":"web-server.html","text":"Web server ShortyCut can be installed as the browser's default search engine when accessed through a web server. Once set up, keywords can be entered directly in the browser's address bar: This method requires a web server to run on the local machine or ShortyCut to be uploaded to a web hosting service. No web server required for Chrome It's not necessary to run a web server when using Chrome. Instead create a keyword query and mark it as the default search engine. See \" Keyword query \" for details. For all other browsers follow the instructions below. Starting the built-in web server ShortyCut comes bundled with a small web server. It requires a Java runtime environment from Oracle (e.g. OpenJDK ) to be installed. The web server is located in the resources folder. On Windows, it can be started by double-clicking on web-server.bat . shortycut +-- data +-- resources | +-- web-server.bat | +-- web-server.jar +-- index.html It requires the environment variable JAVA_HOME or PATH to point to the folder where Java is installed. One of them should be set automatically when installing Java. On all other operating systems, the web server needs to be started manually via command line: javaw -jar web-server.jar The web server must be running whenever keywords are entered in the browser's address bar. It's best to create a start-up task to automatically restart the web server after each reboot. Using a web hosting service Rather than running a local web server, ShortyCut can also be uploaded to a web hosting service. However, it needs to be re-uploaded over and over again, whenever shortcuts are added, removed or modified. Before uploading it for the first time, open search.xml from the data folder in a text editor and update the following two lines: <Image width=\"16\" height=\"16\" type=\"image/x-icon\">http://localhost:4171/resources/favicon.ico</Image> <Url type=\"text/html\" template=\"http://localhost:4171/index.html?q={searchTerms}\" /> Replace http://localhost:4171/ with the domain and path where ShortyCut will eventually be accessed (e.g. https://www.my-website.com/shortycut/ ). Then upload the whole ShortyCut folder to the web hosting server. Add search engine to browser To add ShortyCut as a search engine, open it through the web server. When using a web hosting service, use the domain and path where the uploaded files can be accessed (e.g. https://www.my-website.com/shortycut/). When running the built-in web server locally, go to: http://localhost:4171/ If accessed through a web server (and not loaded directly from the disk drive), ShortyCut is detected automatically by the browser and can be added to the the search engines: Once it has been added, keywords can be entered in the browser's search field. To be able to enter them in the address bar as well, select ShortyCut as the default search engine in the browser settings: After that, keywords can be entered directly in the browser's address bar: Using ShortyCut as the default search engine will replace the address bar's default behavior. It will especially block suggestions that are usually displayed as you type. Using encrypted connections Some browsers like Edge only detect and accept search engines which are accessed via encrypted https . When using such a browser in combination with the built-in web server, open ShortyCut via this link: https://localhost:4172/ The built-in web server uses a self-signed certificate for the encryption. This will cause browser warnings. Confirm that the page should be trusted and opened nevertheless. Configuring the built-in web server The built-in web server has a few settings that can be tweaked. They are configured in web-server.properties located in the data folder. The file contains comments explaining the different settings.","title":"Web server"},{"location":"web-server.html#web-server","text":"ShortyCut can be installed as the browser's default search engine when accessed through a web server. Once set up, keywords can be entered directly in the browser's address bar: This method requires a web server to run on the local machine or ShortyCut to be uploaded to a web hosting service.","title":"Web server"},{"location":"web-server.html#no-web-server-required-for-chrome","text":"It's not necessary to run a web server when using Chrome. Instead create a keyword query and mark it as the default search engine. See \" Keyword query \" for details. For all other browsers follow the instructions below.","title":"No web server required for Chrome"},{"location":"web-server.html#starting-the-built-in-web-server","text":"ShortyCut comes bundled with a small web server. It requires a Java runtime environment from Oracle (e.g. OpenJDK ) to be installed. The web server is located in the resources folder. On Windows, it can be started by double-clicking on web-server.bat . shortycut +-- data +-- resources | +-- web-server.bat | +-- web-server.jar +-- index.html It requires the environment variable JAVA_HOME or PATH to point to the folder where Java is installed. One of them should be set automatically when installing Java. On all other operating systems, the web server needs to be started manually via command line: javaw -jar web-server.jar The web server must be running whenever keywords are entered in the browser's address bar. It's best to create a start-up task to automatically restart the web server after each reboot.","title":"Starting the built-in web server"},{"location":"web-server.html#using-a-web-hosting-service","text":"Rather than running a local web server, ShortyCut can also be uploaded to a web hosting service. However, it needs to be re-uploaded over and over again, whenever shortcuts are added, removed or modified. Before uploading it for the first time, open search.xml from the data folder in a text editor and update the following two lines: <Image width=\"16\" height=\"16\" type=\"image/x-icon\">http://localhost:4171/resources/favicon.ico</Image> <Url type=\"text/html\" template=\"http://localhost:4171/index.html?q={searchTerms}\" /> Replace http://localhost:4171/ with the domain and path where ShortyCut will eventually be accessed (e.g. https://www.my-website.com/shortycut/ ). Then upload the whole ShortyCut folder to the web hosting server.","title":"Using a web hosting service"},{"location":"web-server.html#add-search-engine-to-browser","text":"To add ShortyCut as a search engine, open it through the web server. When using a web hosting service, use the domain and path where the uploaded files can be accessed (e.g. https://www.my-website.com/shortycut/). When running the built-in web server locally, go to: http://localhost:4171/ If accessed through a web server (and not loaded directly from the disk drive), ShortyCut is detected automatically by the browser and can be added to the the search engines: Once it has been added, keywords can be entered in the browser's search field. To be able to enter them in the address bar as well, select ShortyCut as the default search engine in the browser settings: After that, keywords can be entered directly in the browser's address bar: Using ShortyCut as the default search engine will replace the address bar's default behavior. It will especially block suggestions that are usually displayed as you type.","title":"Add search engine to browser"},{"location":"web-server.html#using-encrypted-connections","text":"Some browsers like Edge only detect and accept search engines which are accessed via encrypted https . When using such a browser in combination with the built-in web server, open ShortyCut via this link: https://localhost:4172/ The built-in web server uses a self-signed certificate for the encryption. This will cause browser warnings. Confirm that the page should be trusted and opened nevertheless.","title":"Using encrypted connections"},{"location":"web-server.html#configuring-the-built-in-web-server","text":"The built-in web server has a few settings that can be tweaked. They are configured in web-server.properties located in the data folder. The file contains comments explaining the different settings.","title":"Configuring the built-in web server"}]}